const mysql = require('mysql2');
const config = require('../../config.json');
const connection = mysql.createConnection({
  host: config.Mysql_Host,
  user: config.Mysql_User,
  password: config.Mysql_Password,
  database: config.Mysql_Database,
});


class DatabaseInfo {
    async Adddomain(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            var sql = "INSERT INTO domains (data_check,domain, ip, server, poweredby, suffix, active) VALUES (NOW(),'"+ info.domain+ "', '"+ info.ip+ "', '"+ info.server+ "', '"+ info.poweredby+ "', '"+ info.suffix+ "', " + info.active+ ')'
            console.log('Adddomain', sql)
            connection.query(sql,function(err, results, fields) {
                resolve ({salvo: true})
            });
        });
       
    };

    async SuffixCount(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            var sql = 'SELECT suffix,COUNT(*) AS Contagem FROM domains GROUP BY suffix order by Contagem desc;'
            console.log('SuffixCount', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async DomainsFromIP(info) {

        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT domain FROM domains where' + " ip = '" +  info + "';"
            console.log('DomainsFromIP', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        })
        
    };

    async TopIP(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT ip,COUNT(*) AS Contagem FROM domains GROUP BY ip order by Contagem desc limit 20;'
            console.log('TopIP', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async TopServers(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT server,COUNT(*) AS Contagem FROM domains GROUP BY server order by Contagem desc limit 20;'
            console.log('TopServers', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async TopSuffix(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT suffix,COUNT(*) AS Contagem FROM domains GROUP BY suffix order by Contagem desc limit 20;'
            console.log('TopSuffix', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async TopPoweredBy(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT poweredby,COUNT(*) AS Contagem FROM domains GROUP BY poweredby order by Contagem desc limit 20;'
            console.log('TopPoweredBy', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async LoginCheckerUser(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = "SELECT user, password FROM users where user = '"+ info.username + "';"
            console.log('LoginCheckerUser', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async FrameworkGet(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT id, domain FROM domains where active = true AND framework = 0 order by RAND() limit 1;'
            console.log('FrameworkGet', sql)
            connection.query(sql,function(err, results, fields) {
                console.log(results)
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };
    
    async FrameworkPOST(info) {
        
        var sql = 'UPDATE domains SET framework=' +  info.framework + ", data_check=NOW() WHERE id = '"+ info.id+ "';"
        console.log('FrameworkPOST', sql)
        connection.query(sql,function(err, results, fields) {
            //resolve({'rows': results}) // results contains rows returned by server
        });

        return {salvo: true}
       
    };

    async FrameworkCount(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql =  "SELECT frameworks.name, count(*) AS Contagem FROM domains LEFT JOIN  frameworks ON frameworks.ID = domains.framework WHERE domains.active = true AND domains.framework <> 999 GROUP BY domains.framework ORDER BY Contagem DESC;"
            console.log('FrameworkCount', sql)
            connection.query(sql,function(err, results, fields) {
                console.log(err)
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async SQLiGet(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT id,domain FROM domains where framework = 998 AND sqli IS NULL order by RAND() limit 1;'
            console.log('FrameworkGet', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async SQLiPOST(info) {
        
        var sql = "UPDATE domains SET sqli= true, data_check=NOW() WHERE id = " + info.id + ";" 
        console.log('SQLiPOST', sql)
        connection.query(sql,function(err, results, fields) {
                //resolve({'rows': results}) // results contains rows returned by server
        });
        return {salvo: true}
       
    };

    async SQLiCount(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = "SELECT sqli,COUNT(*) AS Contagem FROM domains where framework = 998 GROUP BY sqli order by Contagem desc;"
            console.log('SQLiCount', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };
}

module.exports = new DatabaseInfo();