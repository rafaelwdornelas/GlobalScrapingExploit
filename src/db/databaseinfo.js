const mysql = require('mysql2');
const connection = mysql.createConnection({
  host: '51.161.71.234',
  user: 'root',
  password: 'P@ssw0rdxinf3ctx',
  database: 'scrapingnode'
});



class DatabaseInfo {
    async Adddomain(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            var sql = "INSERT INTO domain (data_check,domain, ip, server, poweredby, suffix, active) VALUES (NOW(),'"+ info.domain+ "', '"+ info.ip+ "', '"+ info.server+ "', '"+ info.poweredby+ "', '"+ info.suffix+ "', " + info.active+ ')'
            console.log('Adddomain', sql)
            connection.query(sql,function(err, results, fields) {
                resolve ({salvo: true})
            });
        });
       
    };

    async SuffixCount(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            var sql = 'SELECT suffix,COUNT(*) AS Contagem FROM domain GROUP BY suffix order by Contagem desc;'
            console.log('SuffixCount', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async DomainsFromIP(info) {

        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT domain FROM domain where' + " ip = '" +  info + "';"
            console.log('DomainsFromIP', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        })
        
    };

    async TopIP(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT ip,COUNT(*) AS Contagem FROM domain GROUP BY ip order by Contagem desc limit 20;'
            console.log('TopIP', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async TopServers(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT server,COUNT(*) AS Contagem FROM domain GROUP BY server order by Contagem desc limit 20;'
            console.log('TopServers', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async TopSuffix(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT suffix,COUNT(*) AS Contagem FROM domain GROUP BY suffix order by Contagem desc limit 20;'
            console.log('TopSuffix', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async TopPoweredBy(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT poweredby,COUNT(*) AS Contagem FROM domain GROUP BY poweredby order by Contagem desc limit 20;'
            console.log('TopPoweredBy', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async LoginCheckerUser(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT "user", password FROM users where "user" ' + "= '"+ info.username + "';"
            console.log('LoginCheckerUser', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async FrameworkGet(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT domain FROM domain where active = true AND framework is null order by random() limit 1;'
            console.log('FrameworkGet', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };
    
    async FrameworkPOST(info) {
        
        var sql = 'UPDATE domain SET framework=' +  info.framework + " WHERE domain = '"+ info.domain+ "';"
        console.log('FrameworkPOST', sql)
        connection.query(sql,function(err, results, fields) {
            //resolve({'rows': results}) // results contains rows returned by server
        });

        return {salvo: true}
       
    };

    async FrameworkCount(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql =  'SELECT framework AS ID,(SELECT name FROM frameworks where "ID" =framework) AS Name, COUNT(*) AS Contagem FROM domain  GROUP BY framework ORDER BY Contagem DESC; '
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async SQLiGet(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = 'SELECT domain FROM domain where framework = 0 AND sqli IS NULL order by random() limit 1;'
            console.log('FrameworkGet', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };

    async SQLiPOST(info) {
        
        var sql = 'UPDATE domain SET sqli= true WHERE domain' + " = '" + info.domain + "';" 
        console.log('SQLiPOST', sql)
        connection.query(sql,function(err, results, fields) {
                //resolve({'rows': results}) // results contains rows returned by server
        });
        return {salvo: true}
       
    };

    async SQLiCount(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function(resolve, reject){
            
            var sql = "SELECT CASE WHEN sqli= true THEN 'Processado' ELSE 'Pendentes' END,COUNT(*) AS Contagem FROM " + 'domain where framework = 0 GROUP BY sqli order by Contagem desc;'
            console.log('FrameworkCount', sql)
            connection.query(sql,function(err, results, fields) {
                resolve({'rows': results}) // results contains rows returned by server
            });
        });
    };
}

module.exports = new DatabaseInfo();