const mysql = require("mysql2");
const config = require("../../config.json");
const global = require("../functionsglobal");
const log = global.log;
const connection = mysql.createConnection({
    host: config.Mysql_Host,
    user: config.Mysql_User,
    password: config.Mysql_Password,
    database: config.Mysql_Database,
    multipleStatements: true,
});

class DatabaseInfo {
    async Adddomain(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "INSERT INTO domains (data_check,domain, ip, server, poweredby, suffix, active) VALUES (NOW(),'" +
                info.domain +
                "', '" +
                info.ip +
                "', '" +
                info.server +
                "', '" +
                info.poweredby +
                "', '" +
                info.suffix +
                "', " +
                info.active +
                ")";
            log("Adddomain: " + info.domain);
            connection.query(sql, function (err, results, fields) {
                resolve({ salvo: true });
            });
        });
    }

    async SuffixCount(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT suffix,COUNT(*) AS Contagem FROM domains GROUP BY suffix order by Contagem desc;";
            log("Suffix Count");
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async DomainsFromIP(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT domain FROM domains where" + " ip = '" + info + "';";
            log("Domains From IP: " + info);
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async TopIP(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT ip,COUNT(*) AS Contagem FROM domains GROUP BY ip order by Contagem desc limit 20;";
            log("Top IP");
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async TopServers(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT server,COUNT(*) AS Contagem FROM domains GROUP BY server order by Contagem desc limit 20;";
            log("Top Servers");
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async TopSuffix(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT suffix,COUNT(*) AS Contagem FROM domains GROUP BY suffix order by Contagem desc limit 20;";
            log("Top Suffix");
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async TopPoweredBy(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT poweredby,COUNT(*) AS Contagem FROM domains GROUP BY poweredby order by Contagem desc limit 20;";
            log("Top PoweredBy");
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async LoginCheckerUser(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT user, password FROM users where user = '" +
                info.username +
                "';";
            log("Login Checker User: " + info.username);
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async FrameworkGet(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT id, domain FROM domains where active = true AND framework = 0 order by RAND() limit 20;";
            log("Framework Get");
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async FrameworkPOST(info) {
        var sql =
            "UPDATE domains SET framework=" +
            info.framework +
            ", data_check=NOW() WHERE id = '" +
            info.id +
            "';";
        log("Framework POST: " + info.id + " [" + info.framework + "]");
        connection.query(sql, function (err, results, fields) {
            //resolve({'rows': results}) // results contains rows returned by server
        });

        return { salvo: true };
    }

    async FrameworkPOSTMultiply(info) {
        var queries = "";

        //Loop para verificação de cada um dos dominios retornados pela API
        await asyncForEach(info, async (infos) => {
            log("Framework POST: " + infos.id + " [" + infos.framework + "]");
            queries +=
                "UPDATE domains SET framework=" +
                infos.framework +
                ", data_check=NOW() WHERE id = " +
                infos.id +
                ";";
        });
        //console.log(queries);
        connection.query(queries, function (err, results, fields) {});
        return { salvo: true };
    }

    async FrameworkCount(info) {
        console.log("info", info);
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT frameworks.name, count(*) AS Contagem FROM domains LEFT JOIN  frameworks ON frameworks.ID = domains.framework WHERE domains.active = true AND domains.framework <> 999  AND domains.suffix = '" +
                info +
                "'  GROUP BY domains.framework ORDER BY Contagem DESC;";
            if (info == "{suffix}" || info == "") {
                sql =
                    "SELECT frameworks.name, count(*) AS Contagem FROM domains LEFT JOIN  frameworks ON frameworks.ID = domains.framework WHERE domains.active = true AND domains.framework <> 999 GROUP BY domains.framework ORDER BY Contagem DESC;";
            }
            console.log(sql);
            log("Framework Count");
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async SQLiGet(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT id,domain FROM domains where framework = 998 AND sqli = false AND suffix = '" +
                info +
                "' order by RAND() limit 20;";
            if (info == "{suffix}" || info == "") {
                sql =
                    "SELECT id,domain FROM domains where framework = 998 AND sqli = false order by RAND() limit 20;";
            }
            log("SQLi Get " + info);
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }

    async SQLiPOST(info) {
        var sql =
            "UPDATE domains SET sqli= true, data_check=NOW() WHERE id = " +
            info.id +
            ";";
        log("SQLiPOST: " + info.id);
        connection.query(sql, function (err, results, fields) {
            //resolve({'rows': results}) // results contains rows returned by server
        });
        return { salvo: true };
    }

    async SQLiCount(info) {
        //Inicia uma promise para aguardar todo processo
        return new Promise(async function (resolve, reject) {
            var sql =
                "SELECT sqli,COUNT(*) AS Contagem FROM domains where framework = 998 GROUP BY sqli order by Contagem desc;";
            log("SQLi Count");
            connection.query(sql, function (err, results, fields) {
                resolve({ rows: results }); // results contains rows returned by server
            });
        });
    }
}

//função para loop async
async function asyncForEach(array, callback) {
    for (let index = 0; index < array.length; index++) {
        await callback(array[index], index, array);
    }
}

module.exports = new DatabaseInfo();
