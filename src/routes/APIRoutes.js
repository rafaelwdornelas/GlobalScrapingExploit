const BaseRoute = require("./baseRoute");
const databaseinfo = require("../db/databaseinfo");
const Joi = require("joi");
const failAction = (request, h, err) => {
    throw err;
};

class APIRoutes extends BaseRoute {
    adddomain() {
        return {
            path: "/adddomain",
            method: "POST",
            config: {
                tags: ["api", "Escrita"],
                description: "adddomain",
                notes: "Insere no Banco de Dados um Novo Dominio",
                validate: {
                    failAction,
                    headers: Joi.object({
                        authorization: Joi.string().required(),
                    }).unknown(),
                    payload: {
                        domain: Joi.string().min(1).max(100).required(),
                        ip: Joi.string().min(1).max(15).required(),
                        active: Joi.boolean().required(),
                        server: Joi.string().optional(),
                        poweredby: Joi.string().optional(),
                        suffix: Joi.string().min(1).max(50).required(),
                    },
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.Adddomain(request.payload);
            },
        };
    }

    suffixcount() {
        return {
            path: "/suffixcount",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "Leitura"],
                description: "suffixcount",
                notes: "Contagem de Suffix do Banco de Dados",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.SuffixCount();
            },
        };
    }

    domainsfromip() {
        return {
            path: "/domainsfromip/{ip}",
            method: "GET",
            config: {
                tags: ["api", "Leitura"],
                description: "domainsfromip",
                notes: "Lista todos Dominios de um Mesmo IP",
                validate: {
                    failAction,
                    headers: Joi.object({
                        authorization: Joi.string().required(),
                    }).unknown(),
                    params: {
                        ip: Joi.string().min(1).max(15).required(),
                    },
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.DomainsFromIP(request.params.ip);
            },
        };
    }

    topips() {
        return {
            path: "/topips",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "TOP20"],
                description: "topips",
                notes: "Exibe o TOP 20 dos IPS",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.TopIP();
            },
        };
    }

    topserver() {
        return {
            path: "/topserver",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "TOP20"],
                description: "topserver",
                notes: "Exibe o TOP 20 dos Servers",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.TopServers();
            },
        };
    }

    topsuffix() {
        return {
            path: "/topsuffix",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "TOP20"],
                description: "topsuffix",
                notes: "Exibe o TOP 20 dos Suffix",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.TopSuffix();
            },
        };
    }

    toppoweredby() {
        return {
            path: "/toppoweredby",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "TOP20"],
                description: "toppoweredby",
                notes: "Exibe o TOP 20 dos PoweredBy",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.TopPoweredBy();
            },
        };
    }

    frameworkget() {
        return {
            path: "/frameworkget",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "framework"],
                description: "frameworkget",
                notes: "Captura Dominio para Captura de Framework",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.FrameworkGet();
            },
        };
    }

    frameworkpost() {
        return {
            path: "/frameworkpost",
            method: "POST",
            config: {
                tags: ["api", "framework"],
                description: "frameworkpost",
                notes: "Salva o Framework Correspondente do Dominio",
                validate: {
                    failAction,
                    headers: Joi.object({
                        authorization: Joi.string().required(),
                    }).unknown(),
                    payload: {
                        id: Joi.number().integer().required(),
                        framework: Joi.number().integer().required(),
                    },
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.FrameworkPOST(request.payload);
            },
        };
    }

    frameworkcountsuffix() {
        return {
            path: "/frameworkcount/{suffix}",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "framework"],
                description: "frameworkcount",
                notes: "Contagem de Framework na base de dados",
                validate: {
                    failAction,
                    params: {
                        suffix: Joi.string().optional(),
                    },
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.FrameworkCount(request.params.suffix);
            },
        };
    }
    frameworkcount() {
        return {
            path: "/frameworkcount",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "framework"],
                description: "frameworkcount",
                notes: "Contagem de Framework na base de dados",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.FrameworkCount("");
            },
        };
    }

    sqliget() {
        return {
            path: "/sqliget",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "sqlinjection"],
                description: "sqliget",
                notes: "Captura Dominio para Captura de SQL Injection",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.SQLiGet("");
            },
        };
    }

    sqligetsuffix() {
        return {
            path: "/sqliget/{suffix}",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "sqlinjection"],
                description: "sqliget",
                notes: "Captura Dominio para Captura de SQL Injection",
                validate: {
                    failAction,
                    params: {
                        suffix: Joi.string().optional(),
                    },
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.SQLiGet(request.params.suffix);
            },
        };
    }

    sqlipost() {
        return {
            path: "/sqlipost",
            method: "POST",
            config: {
                auth: false,
                tags: ["api", "sqlinjection"],
                description: "sqlipost",
                notes: "Salva o fim da Verificação Correspondente do Dominio",
                validate: {
                    failAction,
                    headers: Joi.object({
                        authorization: Joi.string().required(),
                    }).unknown(),
                    payload: {
                        id: Joi.number().integer().required(),
                    },
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.SQLiPOST(request.payload);
            },
        };
    }

    sqlicount() {
        return {
            path: "/sqlicount",
            method: "GET",
            config: {
                auth: false,
                tags: ["api", "sqlinjection"],
                description: "sqlicount",
                notes: "Contagem de Status SQL Injection",
                validate: {
                    failAction,
                },
            },
            handler: async (request, headers) => {
                return await databaseinfo.SQLiCount();
            },
        };
    }
}

module.exports = APIRoutes;
