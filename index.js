const Hapi = require('hapi')
const config = require('./config.json');
const APIRoutes = require('./src/routes/APIRoutes')
const AuthRoutes = require('./src/routes/authRoutes')

const HapiSwagger = require('hapi-swagger')
const Inert = require('inert')
const Vision = require('vision')
const Jwt = require('jsonwebtoken')
const HapiJwt = require('hapi-auth-jwt2')
const Keycript = config.keycript
var cluster = require('cluster');
const numCPUs = require('os').cpus().length;

const swaggerConfig = {
    info: {
        title: '#Global Scraping Exploit',
        version: 'v1.0',
        description: 'API de Gerenciamento da Dados de Robos de Varredura de Dominios e Manipulação de Dados.',
        contact: {
            name: 'Rafael Dornelas',
            email: 'rafaelwdornelas@gmail.com'
        }
    },
    tags: [
        {
            name: 'Escrita',
            description: 'Manipulação de Registros de Dominios'
        },
        {
            name: 'TOP20',
            description: 'TOP 20 das Estatísticas da Base de Dados'
        },
        {
            name: 'Leitura',
            description: 'Leitura de Registros de Dominios'
        },
        {
            name: 'framework',
            description: 'BOT Framework'
        },
        {
            name: 'sqlinjection',
            description: 'BOT SQL Injection'
        }
    ],
    grouping: 'tags',
    lang: 'pt',
    jsonEditor: true,

}

const app = new Hapi.Server({ port: config.port, routes: {cors: {origin: ['*'], additionalHeaders: ['cache-control', 'x-requested-with']} }})

function mapRoutes(instance, methods) {
    return methods.map(method => instance[method]())
}

function mapRoutes(instance, methods) {
    return methods.map(method => instance[method]())
}

async function main() {
    await app.register([
        HapiJwt,
        Inert,
        Vision,
        {
            plugin: HapiSwagger,
            options: swaggerConfig
        }
    ])
    app.auth.strategy('jwt', 'jwt', {
        key: Keycript,
         options: {
             expiresIn: 30
         },
        validate: (dado, request) => {
            return {
                isValid: true
            }
        }
    })
    app.auth.default('jwt')
    app.route([
        ...mapRoutes(new APIRoutes(), APIRoutes.methods()),
        ...mapRoutes(new AuthRoutes(Keycript), AuthRoutes.methods())
    ])

    await app.start()
    //console.log('server running at', app.info.port)

    return app;
}

if (cluster.isMaster) {
   console.log('Master process is running');
  for (let i = 0; i < numCPUs; i++) {
    console.log("Fork Open", i + 1)
    cluster.fork();
  }
} else {
    module.exports = main()
}
