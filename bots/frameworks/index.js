const checks = require('./src/checks')
const global = require('./src/functionsglobal')
const log = global.log;
const config = require('../../config.json');
var request = require("request");
var cluster = require('cluster');
const numCPUs = require('os').cpus().length;


if (cluster.isMaster) {
   console.log('Master process is running');
  for (let i = 0; i < numCPUs; i++) {
    console.log("Fork Open", i + 1)
    cluster.fork();
  }
} else {
    CapturaNovo()
}



async function CapturaNovo() {

	var dominio = await GET()
	if (dominio.rows[0] != undefined) {
     await asyncForEach(dominio.rows, async (value) => {
         await Verifica(value.domain,value.id)
      })
	} else {
        //Aguarda 1 minuto
       await  global.sleep(60000)
  }

  CapturaNovo()
}


async function asyncForEach(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array);
  }
}

async function Verifica(line,id) {

	var url = line
    
    identidade = await checks.identifica('https://'+line)

    if (identidade == 999) {
         identidade = await checks.identifica('http://'+line)
    }
    plataforma = await checks.identificador_title(identidade)

    log(line+" Plataforma: "+ plataforma  + ' [' + identidade + ']' ,2)

    var retorno = {"id": id,"framework":identidade}
    await POST(retorno)

    return 

}



async function GET() {

	return new Promise(async function(resolve, reject){ 

		var options = {
  			uri: config.Host_Externo+'/frameworkget',
  			method: 'GET'
    }

		request(options, async function (error, response, body) {
  			resolve(JSON.parse(body)) 
		});

	})
	
}

function POST(dados) {


	var options = {
  		uri: config.Host_Externo+'/frameworkpost',
      headers: {
        'authorization': config.token
      },
  		method: 'POST',
  		json: {"id":dados.id,"framework":dados.framework}
  	}

	request(options, function (error, response, body) {
  		//console.log(body) 
	});
}
