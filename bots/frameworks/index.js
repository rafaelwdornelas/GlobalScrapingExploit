require("events").EventEmitter.setMaxListeners = 0;
require("events").EventEmitter.defaultMaxListeners = 0;
const checks = require("./src/checks");
const global = require("../../src/functionsglobal");
const log = global.log;
const config = require("../../config.json");
var request = require("request");
var cluster = require("cluster");
const numCPUs = require("os").cpus().length;

//Verifica se o cluster atual é Master ou Fork
if (cluster.isMaster) {
  //Exibe no Terminal que o Processo é Master
  console.log("Master process is running");
  //Faz um loop de abertura de novos clusters pelo numero de processadores
  for (let i = 0; i < numCPUs; i++) {
    //Exibe no terminal que o cluster do tipo fork foi aberto
    console.log("Fork Open", i + 1);
    //Abre um novo cluster fork
    cluster.fork();
  }
  //Caso seja um cluster do tipo fork
} else {
  //Inicia a função de Captura de dominios na api
  CapturaNovo();
}

//Função de captura na para verificação de framework
async function CapturaNovo() {
  //Busca na API um array de dominios para verificação
  var dominio = await GET();
  //Verifica se a api retornou valores
  if (dominio.rows[0] != undefined) {
    var retorno = [];
    //Loop para verificação de cada um dos dominios retornados pela API
    await asyncForEach(dominio.rows, async (value) => {
      //Chama a função de Verificação de Framework
      retorno.push(JSON.stringify(await Verifica(value.domain, value.id)));
    });
    //Retorna a API o resultado do framework encontrado no dominio
    await POST(retorno);
  } else {
    //Caso não tenha retornado dados da API
    //Exibe no terminal a espera de um minuto para nova verificação
    console.log("Aguarda 1 Minuto");
    //Aguarda 1 minuto
    await global.sleep(60000);
  }
  //Chama a mesma função novamente para loop infinito
  //CapturaNovo();
}

//função para loop async
async function asyncForEach(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array);
  }
}

//Função de separação de framework
async function Verifica(line, id) {
  //Verifica o framework em servidores https
  identidade = await checks.identifica("https://" + line);
  //Verifica se o retorno https retornou erro
  if (identidade == 999) {
    //Verifica o framework em servidores http
    identidade = await checks.identifica("http://" + line);
  }
  //Retorna o nome do framework pelo id retornado
  plataforma = await checks.identificador_title(identidade);
  //Exibe no terminal o retorno do framework encontrado
  log(line + " Plataforma: " + plataforma + " [" + identidade + "]", 2);
  //Monta o retorno com id e identidade
  var retorno = { id: id, framework: identidade };

  //Retorna o fim da função
  return retorno;
}

//Função de captura de novos dominios na API
async function GET() {
  //abre uma promisse para aguardar resultado da API
  return new Promise(async function (resolve, reject) {
    //Monta as opções do request
    var options = {
      uri: config.Host_Externo + "/frameworkget",
      method: "GET",
    };
    //Realiza o request na API
    request(options, async function (error, response, body) {
      //Verifica se retornou algum erro
      if (error) {
        //Retorna vazio por motivo de erro
        resolve({ rows: [] });
        //Caso nao retorne erro finaliza a primisse com o retorno do request
      } else resolve(JSON.parse(body));
    });
  });
}

//Função para Update na API com o framework encontrado
function POST(dados) {
  console.log(dados);
  //Monta as opções do request
  var options = {
    uri: config.Host_Externo + "/frameworkpostmultiply",
    headers: {
      authorization: config.token,
    },
    method: "POST",
    json: { json: dados },
  };

  //Realiza o request na API
  request(options, function (error, response, body) {
    if (error) {
      console.log(error);
    } else {
      console.log(body);
    }
  });
}
