const chalk = require('chalk');
var fs = require('fs')
var request = require("request");
process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
var util = require('util');

class global {
  

    log(text,type,telesend) {
        function seconds_with_leading_zeros(dt) 
        { 
            return (dt < 10 ? '0' : '') + dt;
        }
        const error = chalk.bold.red;
        const warning = chalk.keyword('orange');
        const good = chalk.greenBright;
        if (telesend == true) {
            Telegramsend(text) 
        }

        var data = new Date();
        var hora    = data.getHours();          // 0-23
        var min     = data.getMinutes();        // 0-59
        var seg     = data.getSeconds();        // 0-59
        var hours = '['+seconds_with_leading_zeros(hora)+':'+seconds_with_leading_zeros(min)+':'+seconds_with_leading_zeros(seg)+']'
        var textx = chalk.red(hours) 
        if (type == 1) {
            text = error(text)
        } else if (type == 2) {
            text = warning(text)
        } else if (type == 3) {
            text = good(text)
        }
        textx = textx + ' - ' + text
        console.log(textx);
    }

    Savelogs(textlog,name) {
        try {
            var logger = fs.createWriteStream('logs/' + name + '.txt', {
                flags: 'a' // 'a' means appending (old data will be preserved)
            });
     
            logger.write(textlog + '\r\n')
            logger.end()
        } catch (err)  {
           
        }
    }

    async requestget(url) {
        return new Promise(function(resolve, reject){
            request({
                uri: url,
                method: "GET",
                timeout: 5000,
                rejectUnauthorized: false,
                followRedirect: true,
                maxRedirects: 10,
                requestCert: true,
                agent: false,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'
                  }
            },function (error, response, body) {
                // in addition to parsing the value, deal with possible errors
               
                 if (error) return resolve('Erro');
                 if (response.statusCode == 404) return  resolve('Erro 404');
                 if (response.statusCode == 403) return  resolve('Erro 403');
                 if (response.statusCode == 502) return  resolve('Erro 502');
                 if (response.statusCode == 500) return  resolve('Erro 500');
                    try {
                        //console.log(response.statusCode)
                        resolve(body.toString());
                    } catch(e) {
                        //console.log("Geterro:",e)
                        resolve('Erro');
                    }
            }).on('error', err => {
                resolve('Erro');
            });
        });
    }
    requestpost(url,dados) {
        return new Promise(function(resolve, reject){
            request({
                uri: url,
                method: "POST",
                rejectUnauthorized: false,
                followRedirect: true,
                maxRedirects: 10,
                requestCert: true,
                agent: false,
                form: dados
            },function (error, response, body) {
                // in addition to parsing the value, deal with possible errors
                if (error) return reject(error);
                    try {
                        // JSON.parse() can throw an exception if not valid JSON
                        resolve(body);
                    } catch(e) {
                        console.log("Geterro:",e)
                        reject(e);
                    }
                });
            });
    }

    sleep(ms){
        return new Promise(resolve=>{
            setTimeout(resolve,ms)
        })
    }
}


module.exports = new global();

  