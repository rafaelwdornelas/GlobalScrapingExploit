var request = require("request");
const cheerio = require('cheerio')
var unique = require('array-unique')
const checks = require('./src/checks')
const global = require('./src/functionsglobal')
const log = global.log;



CapturaNovo()

async function CapturaNovo() {

    var dominio = await GET()

    if (dominio.rowCount == 1) {

        var URL = dominio.rows[0].domain

        await SQLiBuscaURLs(URL)

        var retorno = {"domain": URL}
        await POST(retorno)
    } else {

        //Aguarda 1 minuto
       await  global.sleep(60000)
    }
    
    CapturaNovo()

}





async function SQLiBuscaURLs(url) {

    var urltmp = url

    var protocolo = await checks.protocolo('https://'+url)

     url = protocolo +'www.' +url


    //escreve linha continua para separr cada site
    console.log('-'.repeat((process.stdout.columns/2)))
     
   log('URL: '+url.toUpperCase())
        return new Promise(async function(resolve, reject){
           try {
                var retorno = await global.requestget(url)
                if (retorno.indexOf('href') > -1 ) {
                    var $ = await cheerio.load(retorno);
                    var links = $('a'); 
                    var mylinks = [];
                    $(links).each(async function(i, link){
                        var link = $(link).attr('href');
                        try {
                            if (link == undefined) {

                            } else if (link.indexOf('=') > -1 && link.indexOf('?') > -1) {
                               
                                try {
                                    if (link.indexOf('www') === -1 && link.indexOf('http') === -1) {
                                        link = url  + "/" +  link
                                        link = replaceAll(link,'//', '/')
                                        link = replaceAll(link,'http:/', 'http://')
                                        link = replaceAll(link,'https:/', 'https://')
                                        var arr = link.split("=");
                                        if (mylinks.indexOf(arr[0])==-1) {
                                            mylinks.push(arr[0]);
                                            await global.Savelogs(link,'SQLiLinks')
                                            console.log(link)
                                        }
                                    } else {
                                        if (link.indexOf(urltmp) > -1) {
                                            var arr = link.split("=");
                                            if (mylinks.indexOf(arr[0])==-1) {
                                                mylinks.push(arr[0]);
                                                await global.Savelogs(link,'SQLiLinks')
                                                console.log(link)
                                            }
                                        }
                                    }
                                } catch (err)  {
                                    //console.log(err);
                                }
                            }  else {
                                if (link.indexOf('mailto:') > -1 ) {
                                    link = replaceAll(link,'mailto:', '')
                                    console.log(link)
                                    await global.Savelogs(link + ':' + url,'emails')
                                }
                            }
                        } catch (err)  {
                            //console.log(err);
                        }
                    });
                    mylinks = unique(mylinks);
                    global.log(mylinks.length+' Links Encontrados de '+links.length+' em: '+url);
                    if (mylinks.length > 0) {
                        log('[Outros1]: SQLi Busca URLs Success',2)
                        resolve(true);
                    } else {
                        log('[Outros2]: SQLi Busca URLs Failed',2)
                        resolve(false);
                    }
                } else {
                    log('[Outros3]: SQLi Busca URLs Failed',2)
                    resolve(false);
                }
           } catch (error) {
                log('[Outros4]: SQLi Busca URLs Failed' +error ,2)
                resolve(false);
           }
        });
    }



async function GET() {

    return new Promise(async function(resolve, reject){ 

        var options = {
            uri: 'http://localhost:4000/sqliget',
            method: 'GET'
        }

        request(options, async function (error, response, body) {
            resolve(JSON.parse(body)) 
        });

    })
    
}


function POST(dados) {


    var options = {
        uri: 'http://localhost:4000/sqlipost',
        method: 'POST',
        json: {"domain":dados.domain}
    }

    request(options, function (error, response, body) {
        //console.log(body) 
    });
}
